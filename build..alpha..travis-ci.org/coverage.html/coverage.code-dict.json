{"/home/travis/build/npmtest/node-npmtest-hamljs/test.js":"/* istanbul instrument in package npmtest_hamljs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hamljs/lib.npmtest_hamljs.js":"/* istanbul instrument in package npmtest_hamljs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hamljs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hamljs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hamljs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hamljs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hamljs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hamljs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hamljs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hamljs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hamljs.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hamljs.__dirname + '/lib.npmtest_hamljs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hamljs/node_modules/hamljs/lib/haml.js":"// Haml - Copyright TJ Holowaychuk <tj@vision-media.ca> (MIT Licensed)\n\nvar HAML = {};\n\n/**\n * Version.\n */\n\nHAML.version = '0.6.2'\n\n/**\n * Haml template cache.\n */\n\nHAML.cache = {}\n\n/**\n * Default error context length.\n */\n\nHAML.errorContextLength = 15\n\n/**\n * Self closing tags.\n */\n\nHAML.selfClosing = [\n    'meta',\n    'img',\n    'link',\n    'br',\n    'hr',\n    'input',\n    'area',\n    'base'\n  ]\n\n/**\n * Default supported doctypes.\n */\n\nHAML.doctypes = {\n  '5': '<!DOCTYPE html>',\n  'xml': '<?xml version=\"1.0\" encoding=\"utf-8\" ?>',\n  'default': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">',\n  'strict': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">',\n  'frameset': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">',\n  '1.1': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">',\n  'basic': '<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN\" \"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\">',\n  'mobile': '<!DOCTYPE html PUBLIC \"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\" \"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\">'\n}\n\n/**\n * Default filters.\n */\n\nHAML.filters = {\n\n  /**\n   * Return plain string.\n   */\n\n  plain: function(str, buf) {\n    buf.push(str)\n  },\n\n  /**\n   * Wrap with CDATA tags.\n   */\n\n  cdata: function(str, buf) {\n    buf.push('<![CDATA[\\n' + str + '\\n]]>')\n  },\n\n  /**\n   * Wrap with <script> and CDATA tags.\n   */\n\n  javascript: function(str, buf) {\n    buf.push('<script type=\"text/javascript\">\\n//<![CDATA[\\n' + str + '\\n//]]></script>')\n  }\n}\n\n/**\n * HamlError.\n */\n\nvar HamlError = HAML.HamlError = function(msg) {\n    this.name = 'HamlError'\n    this.message = msg\n    Error.captureStackTrace(this, HAML.render)\n}\n\n/**\n * HamlError inherits from Error.\n */\nHamlError.super_ = Error;\nHamlError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: HamlError,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\n\n/**\n * Lexing rules.\n */\n\nvar rules = {\n  indent: /^\\n( *)(?! *-#)/,\n  conditionalComment: /^\\/(\\[[^\\n]+\\])/,\n  comment: /^\\n? *\\/ */,\n  silentComment: /^\\n? *-#([^\\n]*)/,\n  doctype: /^!!! *([^\\n]*)/,\n  escape: /^\\\\(.)/,\n  filter: /^:(\\w+) */,\n  each: /^\\- *each *(\\w+)(?: *, *(\\w+))? * in ([^\\n]+)/,\n  code: /^\\-([^\\n]+)/,\n  outputCode: /^!=([^\\n]+)/,\n  escapeCode: /^=([^\\n]+)/,\n  attrs: /^\\{(.*?)\\}/,\n  tag: /^%([-a-zA-Z][-a-zA-Z0-9:]*)/,\n  class: /^\\.([\\w\\-]+)/,\n  id: /^\\#([\\w\\-]+)/,\n  text: /^([^\\n]+)/\n}\n\n/**\n * Return error context _str_.\n *\n * @param  {string} str\n * @return {string}\n * @api private\n */\n\nfunction context(str) {\n  return String(str)\n    .substr(0, HAML.errorContextLength)\n    .replace(/\\n/g, '\\\\n')\n}\n\n/**\n * Tokenize _str_.\n *\n * @param  {string} str\n * @return {array}\n * @api private\n */\n\nfunction tokenize(str) {\n  var captures,\n      token,\n      tokens = [],\n      line = 1,\n      lastIndents = 0,\n      str = String(str).trim().replace(/\\r\\n|\\r|\\n *\\n/g, '\\n')\n  function error(msg){ throw new HamlError('(Haml):' + line + ' ' + msg) }\n  while (str.length) {\n    for (var type in rules)\n      if (captures = rules[type].exec(str)) {\n        token = {\n          type: type,\n          line: line,\n          match: captures[0],\n          val: captures.length > 2\n            ? captures.slice(1)\n            : captures[1]\n        }\n        str = str.substr(captures[0].length)\n        if (type === 'indent') ++line\n        else  break\n        var indents = token.val.length / 2\n        if (indents % 1)\n          error('invalid indentation; got ' + token.val.length + ' spaces, should be multiple of 2')\n        else if (indents - 1 > lastIndents)\n          error('invalid indentation; got ' + indents + ', when previous was ' + lastIndents)\n        else if (lastIndents > indents)\n          while (lastIndents-- > indents)\n            tokens.push({ type: 'outdent', line: line })\n        else if (lastIndents !== indents)\n          tokens.push({ type: 'indent', line: line })\n        else\n          tokens.push({ type: 'newline', line: line })\n        lastIndents = indents\n      }\n    if (token) {\n      if (token.type !== 'silentComment')\n        tokens.push(token)\n      token = null\n    } else\n      error('near \"' + context(str) + '\"')\n  }\n  return tokens.concat({ type: 'eof' })\n}\n\n// --- Parser\n\n/**\n * Initialize parser with _str_ and _options_.\n */\n\nvar Parser = HAML.Parser = function (str, options) {\n  options = options || {}\n  this.tokens = tokenize(str)\n  this.xml = options.xml\n}\n\nParser.prototype = {\n\n  /**\n   * Lookahead a single token.\n   *\n   * @return {object}\n   * @api private\n   */\n\n  get peek() {\n    return this.tokens[0]\n  },\n\n  /**\n   * Advance a single token.\n   *\n   * @return {object}\n   * @api private\n   */\n\n  get advance() {\n    return this.current = this.tokens.shift()\n  },\n\n  /**\n   *    outdent\n   *  | eof\n   */\n\n  get outdent() {\n    switch (this.peek.type) {\n      case 'eof':\n        return\n      case 'outdent':\n        return this.advance\n      default:\n        throw new HamlError('expected outdent, got ' + this.peek.type)\n    }\n  },\n\n  /**\n   * text\n   */\n\n  get text() {\n    var text = this.advance.val.trim();\n\n    // String interpolation\n    text = text.replace(/#\\{(.*)\\}/, '\" + $1 + \"')\n\n    this.buffer(text)\n  },\n\n  /**\n   * indent expr outdent\n   */\n\n  get block() {\n    this.advance\n    while (this.peek.type !== 'outdent' &&\n           this.peek.type !== 'eof')\n      this.expr\n    this.outdent\n  },\n\n  /**\n   * indent expr\n   */\n\n  get textBlock() {\n    var token,\n        indents = 1\n    this.advance\n    while (this.peek.type !== 'eof' && indents)\n      switch((token = this.advance).type) {\n        case 'newline':\n          this.buffer('\\\\n' + Array(indents).join('  ') + '')\n          break\n        case 'indent':\n          ++indents\n          this.buffer('\\\\n' + Array(indents).join('  ') + '')\n          break\n        case 'outdent':\n          --indents\n          if (indents === 1) this.buffer('\\\\n')\n          break\n        default:\n          this.buffer(token.match.replace(/\"/g, '\\\\\\\"'))\n      }\n  },\n\n  /**\n   *  ( attrs | class | id )*\n   */\n\n  get attrs() {\n    var attrs = ['attrs', 'class', 'id'],\n        buf = []\n\n    while (attrs.indexOf(this.peek.type) !== -1)\n      switch (this.peek.type) {\n        case 'id':\n          buf.push('{ id: \"' + this.advance.val + '\" }')\n          break\n        case 'class':\n          buf.push('{ class: \"' + this.advance.val + '\" }');\n          break\n        case 'attrs':\n          buf.push('{ ' + this.advance.val.replace(/(for) *:/gi, '\"$1\":') + ' }')\n      }\n\n    return buf.length\n      ? ' \" + attrs([' + buf.join(', ') + ']) + \"'\n      : ''\n  },\n\n  /**\n   *   tag\n   * | tag text\n   * | tag conditionalComment\n   * | tag comment\n   * | tag outputCode\n   * | tag escapeCode\n   * | tag block\n   */\n\n  get tag() {\n    var tag = this.advance.val,\n        selfClosing = !this.xml && HAML.selfClosing.indexOf(tag) !== -1\n\n    this.buffer('\\\\n<' + tag + this.attrs + (selfClosing ? '/>' : '>'));\n    switch (this.peek.type) {\n      case 'text':\n        this.text\n        break\n      case 'conditionalComment':\n        this.conditionalComment\n        break;\n      case 'comment':\n        this.comment\n        break\n      case 'outputCode':\n        this.outputCode\n        break\n      case 'escapeCode':\n        this.escapeCode\n        break\n      case 'indent':\n        this.block\n    }\n    if (!selfClosing) this.buffer('</' + tag + '>')\n  },\n\n  /**\n   * outputCode\n   */\n\n  get outputCode() {\n    this.buffer(this.advance.val, false)\n  },\n\n  /**\n   * escapeCode\n   */\n\n  get escapeCode() {\n    this.buffer('escape(' + this.advance.val + ')', false)\n  },\n\n  /**\n   * doctype\n   */\n\n  get doctype() {\n    var doctype = this.advance.val.trim().toLowerCase() || 'default'\n    if (doctype in HAML.doctypes)\n      this.buffer(HAML.doctypes[doctype].replace(/\"/g, '\\\\\"'))\n    else\n      throw new HamlError(\"doctype `\" + doctype + \"' does not exist\")\n  },\n\n  /**\n   * conditional comment expr\n   */\n\n  get conditionalComment() {\n    var condition= this.advance.val\n\n    this.buffer('<!--' + condition + '>')\n\n    this.peek.type === 'indent'\n      ? this.block\n      : this.expr\n\n    this.buffer('<![endif]-->')\n  },\n\n  /**\n   * comment expr\n   */\n\n  get comment() {\n    this.advance\n    this.buffer('<!-- ')\n    var buf = this.peek.type === 'indent'\n      ? this.block\n      : this.expr\n    this.buffer(' -->')\n  },\n\n  /**\n   *   code\n   * | code block\n   */\n\n  get code() {\n    var code = this.advance.val\n\n    if (this.peek.type === 'indent') {\n      this.buf.push(code)\n      this.buf.push('{')\n      this.block\n      this.buf.push('}')\n      return\n    }\n\n    this.buf.push(code)\n  },\n\n  /**\n   * filter textBlock\n   */\n\n  get filter() {\n    var filter = this.advance.val\n    if (!(filter in HAML.filters))\n      throw new HamlError(\"filter `\" + filter + \"' does not exist\")\n    if (this.peek.type !== 'indent')\n      throw new HamlError(\"filter `\" + filter + \"' expects a text block\")\n\n    this.buf.push('HAML.filters.' + filter + '(')\n    this.buf.push('(function(){')\n    this.buf.push('var buf = []')\n    this.textBlock\n    this.buf.push('return buf.join(\"\")')\n    this.buf.push('}).call(this)')\n    this.buf.push(', buf)')\n  },\n\n  /**\n   * each block\n   */\n\n  get iterate() {\n    var each = this.advance,\n      key = each.val[1],\n      vals = each.val[2],\n      val = each.val[0]\n\n    if (this.peek.type !== 'indent')\n      throw new HamlError(\"'- each' expects a block, but got \" + this.peek.type)\n\n    this.buf.push('for (var ' + (key || 'index') + ' in ' + vals + ') {')\n    this.buf.push('var ' + val + ' = ' + vals + '[' + (key || 'index') + '];')\n\n    this.block\n\n    this.buf.push('}')\n  },\n\n  /**\n   *   eof\n   * | tag\n   * | text*\n   * | each\n   * | code\n   * | escape\n   * | doctype\n   * | filter\n   * | comment\n   * | conditionalComment\n   * | escapeCode\n   * | outputCode\n   */\n\n  get expr() {\n    switch (this.peek.type) {\n      case 'id':\n      case 'class':\n        this.tokens.unshift({ type: 'tag', val: 'div' })\n        return this.tag\n      case 'tag':\n        return this.tag\n      case 'text':\n        var buf = []\n        while (this.peek.type === 'text') {\n          buf.push(this.advance.val.trim())\n          if (this.peek.type === 'newline')\n            this.advance\n        }\n        return this.buffer(buf.join(' '))\n      case 'each':\n        return this.iterate\n      case 'code':\n        return this.code\n      case 'escape':\n        return this.buffer(this.advance.val);\n      case 'doctype':\n        return this.doctype\n      case 'filter':\n        return this.filter\n      case 'conditionalComment':\n        return this.conditionalComment\n      case 'comment':\n        return this.comment\n      case 'escapeCode':\n        return this.escapeCode\n      case 'outputCode':\n        return this.outputCode\n      case 'newline':\n      case 'indent':\n      case 'outdent':\n        this.advance\n        return this.expr\n      default:\n        throw new HamlError('unexpected ' + this.peek.type)\n    }\n  },\n\n  /**\n   * expr*\n   */\n\n  get js() {\n    this.buf = [\n      'with (locals || {}) {',\n      '  var buf = [];'\n    ]\n\n    while (this.peek.type !== 'eof')\n      this.expr\n\n    this.buf.push('  return buf.join(\"\")')\n    this.buf.push('}');\n\n    return this.buf.join('\\n')\n  },\n\n  buffer: function (str, quoted) {\n    if (typeof quoted === 'undefined')\n      var quoted = true\n\n    if (quoted)\n      this.buf.push('  buf.push(\"' + str + '\")')\n    else\n      this.buf.push('  buf.push(' + str + ')')\n  }\n}\n\n/**\n * Escape html entities in _str_.\n *\n * @param  {string} str\n * @return {string}\n * @api private\n */\n\nfunction escape(str) {\n  return String(str)\n    .replace(/&/g, '&amp;')\n    .replace(/>/g, '&gt;')\n    .replace(/</g, '&lt;')\n    .replace(/\"/g, '&quot;')\n}\n\n/**\n * Render _attrs_ to html escaped attributes.\n *\n * @param  {array} attrs\n * @return {string}\n * @api public\n */\n\nfunction attrs(attrs) {\n  var finalAttrs = {}\n    , classes = []\n    , buf = []\n\n  for (var i = 0, len = attrs.length; i < len; i++)\n    for (var attrName in attrs[i])\n      if (attrName === 'class')\n        classes.push(attrs[i][attrName])\n      else\n        finalAttrs[attrName] = attrs[i][attrName]\n\n  if (classes.length)\n    finalAttrs['class'] = classes.join(' ')\n\n  for (var key in finalAttrs)\n    if (typeof finalAttrs[key] === 'boolean') {\n      if (finalAttrs[key] === true)\n        buf.push(key + '=\"' + key + '\"')\n    } else if (finalAttrs[key])\n      buf.push(key + '=\"' + escape(finalAttrs[key]) + '\"')\n  return buf.join(' ')\n}\n\n/**\n * Compile a function from the given `str`.\n *\n * @param {String} str\n * @return {Function}\n * @api public\n */\n\nHAML.compile = function(str, options){\n  var parser = new Parser(str, options);\n  var fn = new Function('locals, attrs, escape, HAML', parser.js);\n  return function(locals){\n    return fn.apply(this, [locals, attrs, escape, HAML]);\n  };\n};\n\n/**\n * Render a _str_ of haml.\n *\n * Options:\n *\n *   - locals   Local variables available to the template\n *   - context  Context in which the template is evaluated (becoming \"this\")\n *   - filename Filename used to aid in error reporting\n *   - cache    Cache compiled javascript, requires \"filename\"\n *   - xml      Force xml support (no self-closing tags)\n *\n * @param  {string} str\n * @param  {object} options\n * @return {string}\n * @api public\n */\n\nHAML.render = function(str, options) {\n  var parser,\n      options = options || {}\n  if (options.cache && !options.filename)\n    throw new Error('filename option must be passed when cache is enabled')\n  return (function(){\n    try {\n      var fn\n      if (options.cache && HAML.cache[options.filename])\n        fn = HAML.cache[options.filename]\n      else {\n        parser = new Parser(str, options)\n        fn = Function('locals, attrs, escape, HAML', parser.js)\n      }\n      return (options.cache\n          ? HAML.cache[options.filename] = fn\n          : fn).call(options.context, options.locals, attrs, escape, HAML)\n    } catch (err) {\n      if (parser && err instanceof HamlError)\n        err.message = '(Haml):' + parser.peek.line + ' ' + err.message\n      else if (!(err instanceof HamlError))\n        err.message = '(Haml): ' + err.message\n      if (options.filename)\n        err.message = err.message.replace('Haml', options.filename)\n      throw err\n    }\n  }).call(options.context)\n}\n\n/**\n * Render a file containing haml and cache the parser.\n *\n * @param  {string} filename\n * @param  {string} encoding\n * @param  {object} options\n * @param  {function} callback\n * @return {void}\n * @api public\n */\n\nHAML.renderFile = function(filename, encoding, options, callback) {\n  var fs = require('fs');\n  options = options || {}\n  options.filename = options.filename || filename\n  options.cache = options.hasOwnProperty('cache') ? options.cache : true\n\n  if (HAML.cache[filename]) {\n    process.nextTick(function() {\n      callback(null, HAML.render(null, options))\n    });\n  } else {\n    fs.readFile(filename, encoding, function(err, str) {\n      if (err) {\n        callback(err)\n      } else {\n        callback(null, HAML.render(str, options))\n      }\n    });\n  }\n}\n\nmodule.exports = HAML;\n","/home/travis/build/npmtest/node-npmtest-hamljs/node_modules/hamljs/Gruntfile.js":"\"use strict\";\n\nmodule.exports = function(grunt) {\n\n  grunt.initConfig({\n    urequire: {\n      dist: {\n        path: \"lib\",\n        main: \"haml\",\n        dstPath: \".\",\n        template: \"AMD\"\n      }\n    }\n  });\n\n  grunt.loadNpmTasks(\"grunt-urequire\");\n  grunt.registerTask(\"default\", [\"urequire\"]);\n\n};\n","/home/travis/build/npmtest/node-npmtest-hamljs/node_modules/hamljs/haml.js":"// Generated by uRequire v0.6.10 - template: 'AMD' \n(function (window, global) {\n  \nvar __isAMD = !!(typeof define === 'function' && define.amd),\n    __isNode = (typeof exports === 'object'),\n    __isWeb = !__isNode;\ndefine(function (require, exports, module) {\n  \n\nvar HAML = {};\nHAML.version = \"0.6.2\";\nHAML.cache = {};\nHAML.errorContextLength = 15;\nHAML.selfClosing = [\n  \"meta\",\n  \"img\",\n  \"link\",\n  \"br\",\n  \"hr\",\n  \"input\",\n  \"area\",\n  \"base\"\n];\nHAML.doctypes = {\n  \"5\": \"<!DOCTYPE html>\",\n  \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\" ?>\",\n  \"default\": \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Transitional//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\\\">\",\n  \"strict\": \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Strict//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\\\">\",\n  \"frameset\": \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.0 Frameset//EN\\\" \\\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\\\">\",\n  \"1.1\": \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML 1.1//EN\\\" \\\"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\\\">\",\n  \"basic\": \"<!DOCTYPE html PUBLIC \\\"-//W3C//DTD XHTML Basic 1.1//EN\\\" \\\"http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd\\\">\",\n  \"mobile\": \"<!DOCTYPE html PUBLIC \\\"-//WAPFORUM//DTD XHTML Mobile 1.2//EN\\\" \\\"http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd\\\">\"\n};\nHAML.filters = {\n  plain: function (str, buf) {\n    buf.push(str);\n  },\n  cdata: function (str, buf) {\n    buf.push(\"<![CDATA[\\n\" + str + \"\\n]]>\");\n  },\n  javascript: function (str, buf) {\n    buf.push(\"<script type=\\\"text/javascript\\\">\\n//<![CDATA[\\n\" + str + \"\\n//]]></script>\");\n  }\n};\nvar HamlError = HAML.HamlError = function (msg) {\n    this.name = \"HamlError\";\n    this.message = msg;\n    Error.captureStackTrace(this, HAML.render);\n  };\nHamlError.super_ = Error;\nHamlError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: HamlError,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  }\n});\nvar rules = {\n    indent: /^\\n( *)(?! *-#)/,\n    conditionalComment: /^\\/(\\[[^\\n]+\\])/,\n    comment: /^\\n? *\\/ */,\n    silentComment: /^\\n? *-#([^\\n]*)/,\n    doctype: /^!!! *([^\\n]*)/,\n    escape: /^\\\\(.)/,\n    filter: /^:(\\w+) */,\n    each: /^\\- *each *(\\w+)(?: *, *(\\w+))? * in ([^\\n]+)/,\n    code: /^\\-([^\\n]+)/,\n    outputCode: /^!=([^\\n]+)/,\n    escapeCode: /^=([^\\n]+)/,\n    attrs: /^\\{(.*?)\\}/,\n    tag: /^%([-a-zA-Z][-a-zA-Z0-9:]*)/,\n    class: /^\\.([\\w\\-]+)/,\n    id: /^\\#([\\w\\-]+)/,\n    text: /^([^\\n]+)/\n  };\nfunction context(str) {\n  return String(str).substr(0, HAML.errorContextLength).replace(/\\n/g, \"\\\\n\");\n}\nfunction tokenize(str) {\n  var captures, token, tokens = [], line = 1, lastIndents = 0, str = String(str).trim().replace(/\\r\\n|\\r|\\n *\\n/g, \"\\n\");\n  function error(msg) {\n    throw new HamlError(\"(Haml):\" + line + \" \" + msg);\n  }\n  while (str.length) {\n    for (var type in rules)\n      if (captures = rules[type].exec(str)) {\n        token = {\n          type: type,\n          line: line,\n          match: captures[0],\n          val: captures.length > 2 ? captures.slice(1) : captures[1]\n        };\n        str = str.substr(captures[0].length);\n        if (type === \"indent\")\n          ++line;\n        else\n          break;\n        var indents = token.val.length / 2;\n        if (indents % 1)\n          error(\"invalid indentation; got \" + token.val.length + \" spaces, should be multiple of 2\");\n        else if (indents - 1 > lastIndents)\n          error(\"invalid indentation; got \" + indents + \", when previous was \" + lastIndents);\n        else if (lastIndents > indents)\n          while (lastIndents-- > indents)\n            tokens.push({\n              type: \"outdent\",\n              line: line\n            });\n        else if (lastIndents !== indents)\n          tokens.push({\n            type: \"indent\",\n            line: line\n          });\n        else\n          tokens.push({\n            type: \"newline\",\n            line: line\n          });\n        lastIndents = indents;\n      }\n    if (token) {\n      if (token.type !== \"silentComment\")\n        tokens.push(token);\n      token = null;\n    } else\n      error(\"near \\\"\" + context(str) + \"\\\"\");\n  }\n  return tokens.concat({ type: \"eof\" });\n}\nvar Parser = HAML.Parser = function (str, options) {\n    options = options || {};\n    this.tokens = tokenize(str);\n    this.xml = options.xml;\n  };\nParser.prototype = {\n  get peek() {\n    return this.tokens[0];\n  },\n  get advance() {\n    return this.current = this.tokens.shift();\n  },\n  get outdent() {\n    switch (this.peek.type) {\n    case \"eof\":\n      return;\n    case \"outdent\":\n      return this.advance;\n    default:\n      throw new HamlError(\"expected outdent, got \" + this.peek.type);\n    }\n  },\n  get text() {\n    var text = this.advance.val.trim();\n    text = text.replace(/#\\{(.*)\\}/, \"\\\" + $1 + \\\"\");\n    this.buffer(text);\n  },\n  get block() {\n    this.advance;\n    while (this.peek.type !== \"outdent\" && this.peek.type !== \"eof\")\n      this.expr;\n    this.outdent;\n  },\n  get textBlock() {\n    var token, indents = 1;\n    this.advance;\n    while (this.peek.type !== \"eof\" && indents)\n      switch ((token = this.advance).type) {\n      case \"newline\":\n        this.buffer(\"\\\\n\" + Array(indents).join(\"  \") + \"\");\n        break;\n      case \"indent\":\n        ++indents;\n        this.buffer(\"\\\\n\" + Array(indents).join(\"  \") + \"\");\n        break;\n      case \"outdent\":\n        --indents;\n        if (indents === 1)\n          this.buffer(\"\\\\n\");\n        break;\n      default:\n        this.buffer(token.match.replace(/\"/g, \"\\\\\\\"\"));\n      }\n  },\n  get attrs() {\n    var attrs = [\n        \"attrs\",\n        \"class\",\n        \"id\"\n      ], buf = [];\n    while (attrs.indexOf(this.peek.type) !== -1)\n      switch (this.peek.type) {\n      case \"id\":\n        buf.push(\"{ id: \\\"\" + this.advance.val + \"\\\" }\");\n        break;\n      case \"class\":\n        buf.push(\"{ class: \\\"\" + this.advance.val + \"\\\" }\");\n        break;\n      case \"attrs\":\n        buf.push(\"{ \" + this.advance.val.replace(/(for) *:/gi, \"\\\"$1\\\":\") + \" }\");\n      }\n    return buf.length ? \" \\\" + attrs([\" + buf.join(\", \") + \"]) + \\\"\" : \"\";\n  },\n  get tag() {\n    var tag = this.advance.val, selfClosing = !this.xml && HAML.selfClosing.indexOf(tag) !== -1;\n    this.buffer(\"\\\\n<\" + tag + this.attrs + (selfClosing ? \"/>\" : \">\"));\n    switch (this.peek.type) {\n    case \"text\":\n      this.text;\n      break;\n    case \"conditionalComment\":\n      this.conditionalComment;\n      break;\n    case \"comment\":\n      this.comment;\n      break;\n    case \"outputCode\":\n      this.outputCode;\n      break;\n    case \"escapeCode\":\n      this.escapeCode;\n      break;\n    case \"indent\":\n      this.block;\n    }\n    if (!selfClosing)\n      this.buffer(\"</\" + tag + \">\");\n  },\n  get outputCode() {\n    this.buffer(this.advance.val, false);\n  },\n  get escapeCode() {\n    this.buffer(\"escape(\" + this.advance.val + \")\", false);\n  },\n  get doctype() {\n    var doctype = this.advance.val.trim().toLowerCase() || \"default\";\n    if (doctype in HAML.doctypes)\n      this.buffer(HAML.doctypes[doctype].replace(/\"/g, \"\\\\\\\"\"));\n    else\n      throw new HamlError(\"doctype `\" + doctype + \"' does not exist\");\n  },\n  get conditionalComment() {\n    var condition = this.advance.val;\n    this.buffer(\"<!--\" + condition + \">\");\n    this.peek.type === \"indent\" ? this.block : this.expr;\n    this.buffer(\"<![endif]-->\");\n  },\n  get comment() {\n    this.advance;\n    this.buffer(\"<!-- \");\n    var buf = this.peek.type === \"indent\" ? this.block : this.expr;\n    this.buffer(\" -->\");\n  },\n  get code() {\n    var code = this.advance.val;\n    if (this.peek.type === \"indent\") {\n      this.buf.push(code);\n      this.buf.push(\"{\");\n      this.block;\n      this.buf.push(\"}\");\n      return;\n    }\n    this.buf.push(code);\n  },\n  get filter() {\n    var filter = this.advance.val;\n    if (!(filter in HAML.filters))\n      throw new HamlError(\"filter `\" + filter + \"' does not exist\");\n    if (this.peek.type !== \"indent\")\n      throw new HamlError(\"filter `\" + filter + \"' expects a text block\");\n    this.buf.push(\"HAML.filters.\" + filter + \"(\");\n    this.buf.push(\"(function(){\");\n    this.buf.push(\"var buf = []\");\n    this.textBlock;\n    this.buf.push(\"return buf.join(\\\"\\\")\");\n    this.buf.push(\"}).call(this)\");\n    this.buf.push(\", buf)\");\n  },\n  get iterate() {\n    var each = this.advance, key = each.val[1], vals = each.val[2], val = each.val[0];\n    if (this.peek.type !== \"indent\")\n      throw new HamlError(\"'- each' expects a block, but got \" + this.peek.type);\n    this.buf.push(\"for (var \" + (key || \"index\") + \" in \" + vals + \") {\");\n    this.buf.push(\"var \" + val + \" = \" + vals + \"[\" + (key || \"index\") + \"];\");\n    this.block;\n    this.buf.push(\"}\");\n  },\n  get expr() {\n    switch (this.peek.type) {\n    case \"id\":\n    case \"class\":\n      this.tokens.unshift({\n        type: \"tag\",\n        val: \"div\"\n      });\n      return this.tag;\n    case \"tag\":\n      return this.tag;\n    case \"text\":\n      var buf = [];\n      while (this.peek.type === \"text\") {\n        buf.push(this.advance.val.trim());\n        if (this.peek.type === \"newline\")\n          this.advance;\n      }\n      return this.buffer(buf.join(\" \"));\n    case \"each\":\n      return this.iterate;\n    case \"code\":\n      return this.code;\n    case \"escape\":\n      return this.buffer(this.advance.val);\n    case \"doctype\":\n      return this.doctype;\n    case \"filter\":\n      return this.filter;\n    case \"conditionalComment\":\n      return this.conditionalComment;\n    case \"comment\":\n      return this.comment;\n    case \"escapeCode\":\n      return this.escapeCode;\n    case \"outputCode\":\n      return this.outputCode;\n    case \"newline\":\n    case \"indent\":\n    case \"outdent\":\n      this.advance;\n      return this.expr;\n    default:\n      throw new HamlError(\"unexpected \" + this.peek.type);\n    }\n  },\n  get js() {\n    this.buf = [\n      \"with (locals || {}) {\",\n      \"  var buf = [];\"\n    ];\n    while (this.peek.type !== \"eof\")\n      this.expr;\n    this.buf.push(\"  return buf.join(\\\"\\\")\");\n    this.buf.push(\"}\");\n    return this.buf.join(\"\\n\");\n  },\n  buffer: function (str, quoted) {\n    if (typeof quoted === \"undefined\")\n      var quoted = true;\n    if (quoted)\n      this.buf.push(\"  buf.push(\\\"\" + str + \"\\\")\");\n    else\n      this.buf.push(\"  buf.push(\" + str + \")\");\n  }\n};\nfunction escape(str) {\n  return String(str).replace(/&/g, \"&amp;\").replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\");\n}\nfunction attrs(attrs) {\n  var finalAttrs = {}, classes = [], buf = [];\n  for (var i = 0, len = attrs.length; i < len; i++)\n    for (var attrName in attrs[i])\n      if (attrName === \"class\")\n        classes.push(attrs[i][attrName]);\n      else\n        finalAttrs[attrName] = attrs[i][attrName];\n  if (classes.length)\n    finalAttrs[\"class\"] = classes.join(\" \");\n  for (var key in finalAttrs)\n    if (typeof finalAttrs[key] === \"boolean\") {\n      if (finalAttrs[key] === true)\n        buf.push(key + \"=\\\"\" + key + \"\\\"\");\n    } else if (finalAttrs[key])\n      buf.push(key + \"=\\\"\" + escape(finalAttrs[key]) + \"\\\"\");\n  return buf.join(\" \");\n}\nHAML.compile = function (str, options) {\n  var parser = new Parser(str, options);\n  var fn = new Function(\"locals, attrs, escape, HAML\", parser.js);\n  return function (locals) {\n    return fn.apply(this, [\n      locals,\n      attrs,\n      escape,\n      HAML\n    ]);\n  };\n};\nHAML.render = function (str, options) {\n  var parser, options = options || {};\n  if (options.cache && !options.filename)\n    throw new Error(\"filename option must be passed when cache is enabled\");\n  return function () {\n    try {\n      var fn;\n      if (options.cache && HAML.cache[options.filename])\n        fn = HAML.cache[options.filename];\n      else {\n        parser = new Parser(str, options);\n        fn = Function(\"locals, attrs, escape, HAML\", parser.js);\n      }\n      return (options.cache ? HAML.cache[options.filename] = fn : fn).call(options.context, options.locals, attrs, escape, HAML);\n    } catch (err) {\n      if (parser && err instanceof HamlError)\n        err.message = \"(Haml):\" + parser.peek.line + \" \" + err.message;\n      else if (!(err instanceof HamlError))\n        err.message = \"(Haml): \" + err.message;\n      if (options.filename)\n        err.message = err.message.replace(\"Haml\", options.filename);\n      throw err;\n    }\n  }.call(options.context);\n};\nHAML.renderFile = function (filename, encoding, options, callback) {\n  var fs = require(\"fs\");\n  options = options || {};\n  options.filename = options.filename || filename;\n  options.cache = options.hasOwnProperty(\"cache\") ? options.cache : true;\n  if (HAML.cache[filename]) {\n    process.nextTick(function () {\n      callback(null, HAML.render(null, options));\n    });\n  } else {\n    fs.readFile(filename, encoding, function (err, str) {\n      if (err) {\n        callback(err);\n      } else {\n        callback(null, HAML.render(str, options));\n      }\n    });\n  }\n};\nmodule.exports = HAML;\n\nreturn module.exports;\n\n})\n}).call(this, (typeof exports === 'object' ? global : window), (typeof exports === 'object' ? global : window))"}